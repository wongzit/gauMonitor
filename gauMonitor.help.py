# gauMonitor Documents
# Program version: 3.0.0
# Update at 2021-09-12

print("\n                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+")
print("                      |        D o c u m e n t s        |")
print("                      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n")
print("# General Information\n")
print("  gauMonitor is an open-source program for monitoring Gaussian jobs, it follows")
print("MIT license. In current version of gauMonitor, optimization, frequency analyses")
print("and IRC/SCAN calculation jobs are supported.\n\n\n")
print("# Useage\n")
print("  Assuming the Gaussian output file which you want to monitor by gauMonitor, is")
print("at the dictionary: `/homg/wangzhe/cisTS3b_opt_freq.log`, then, you can run gau-")
print("Monitor by run the command: `gaumonitor /homg/wangzhe/cisTS3b_opt_freq.log`. Be")
print("sure to input the right path to the output file. If the output file is in curr-")
print("ent folder, you can just easily run gauMonitor by `gaumonitor output.log`.\n\n\n")
print("# User Interface\n")
print("## Calculation Status Section")
print("  This section always shows in the end of gauMonitor output, give a quick, easy")
print("-understood information about current status of calculation job. It have diffe-")
print("rent information denpending on the calculation jobs:\n")
print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
print(" [SCF] No SCF data yet, check again after several minutes.")
print(" [SCF] SCF done in 36 cycles.")
print(" [OPT] Stationary point found.")
print(" [OPT] Optmization was finished.")
print(" [OPT+FREQ] Optimization was finished, frequency analysis is running.")
print(" [OPT+FREQ] Optimization and frequency analysis were finished.")
print(" [FREQ] Imaginary frequency found!")
print(" [FREQ] No immaginary frequency.")
print(" [FREQ] Frequency analysis was finished.")
print(" [IRC] Calculation was finished.")
print(" [OPT=MODREDUNDANT] Calculation was finished.")
print(" [ERROR] Error termination was found.")
print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n")
print("## SCF Iterations Section")
print("  The SCF iterations section will be displayed if SCF iterations data was found")
print("in the output file of optimization jobs. The following example shows the gauMo-")
print("nitor output of optimization of methane molecule:\n")
print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
print(" # SCF ITERATIONS")
print(" - Summary of SCF Iterations: ")
print("   Cycle    Max.Force     RMS.Force       Max.DP        RMS.DP    Converged?")
print(" -----------------------------------------------------------------------------")
print("            (0.000450)    (0.000300)    (0.001800)    (0.001200)  Threshold")
print("      1      0.016673      0.008912      0.044431      0.023749      NNNN")
print("      2      0.000166      0.000089      0.000468      0.000250      YYYY")
print(" ----------------------------------------------------------------------------- \n\n")
print(" - Summary of electronic energy: \n")
print("   Cycle      E (Hartree)       E.rel (kcal/mol)     Delta-E")
print(" -------------------------------------------------------------")
print("     1      -40.5169484086            0.000000")
print("     2      -40.5183831835           -0.900336          -")
print(" -------------------------------------------------------------")
print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n")
print("  The 1st table gave the information about convergency information during opti-")
print("mization process. The 1st line gave the threshold values of four parameters in")
print("Gaussian: maximum force, RMS force, maximum displacement (DP) and RMS displace-")
print("ment. From the 2nd line, these four values in every optimization steps would be")
print("compared with the threshold values, if the values are smaller / larger than the")
print("thresholds, `Y` / `N` would be marked in the `Converged?` column. If `YYYY` has")
print("achieved, the optimization is finished.")
print("ã€€The 2nd table summarized the electronic energy of each optimization step. The")
print("`E` column gave the absolute energy in Hartree of each step, and the `E.rel` g-")
print("ave the relative energy in kcal/mol compared with the 1st step. `Delta-E` colu-")
print("mn gave the energy change compared with one last step: `-` means the energy was")
print("lower than one last step, and `+` / `=` means the energy was higher / same. So,")
print("there is a tip: if the `-` and `+` are alternatively appear, it is probability")
print("that the optimization is shaking.\n\n")
print("## Electronic Energies of Stationary Points in Scan Calculations")
print("  In scan (opt=modredundant) jobs, if stationary points had found, the electro-")
print("nic energies would be compared with the first points. The output is similar to")
print("that of the SCF energies:\n")
print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
print(" # SCAN STEP")
print(" - Summary of electronic energies for stationary points:\n")
print("   Steps      E (Hartree)       E.rel (kcal/mol)     Delta-E")
print(" -------------------------------------------------------------")
print("     1      -2008.05829512            0.000000 ")
print("     2      -2008.05358381            2.956394          +")
print("     3      -2008.04263173            9.828934          +")
print("     4      -2008.02872412           18.556098          +")
print("     5      -2008.01380169           27.920072          +")
print("     6      -2007.99898817           37.215704          +")
print("     7      -2007.98489975           46.056329          +")
print("     8      -2007.97184184           54.250298          +")
print("     9      -2007.95996796           61.701276          +")
print("    10      -2007.94966673           68.165401          +")
print("    11      -2007.94173971           73.139685          +")
print("    12      -2007.93600324           76.739378          +")
print("    13      -2007.93191834           79.302693          +")
print("    14      -2007.92902249           81.119868          +")
print("    15      -2007.92697148           82.406897          +")
print("    16      -2007.92552246           83.316172          +")
print("    17      -2007.92450611           83.953942          +")
print("    18      -2007.92380143           84.396135          +")
print("    19      -2007.92331909           84.698809          +")
print("    20      -2007.92299072           84.904864          +")
print("    21      -2007.92276493           85.046550          +")
print("    22      -2007.92260589           85.146349          +")
print("    23      -2007.92248979           85.219203          +")
print("    24      -2007.92240224           85.274141          +")
print("    25      -2007.92233593           85.315751          +")
print("    26      -2007.92228504           85.347685          +")
print(" -------------------------------------------------------------")
print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n")
print("  Similar output could be obtained in IRC calculations, also.\n\n")
print("## Force Constant Section for Transition States Calculations")
print("  gauMonitor would detect the current job is transition state (TS) calculation")
print("or not, if TS job is found, another output of force constant information would")
print("be displayed after the SCF iteration section. The following example is a TS of")
print("rearrangement from azirine to acetonitrile, in this reaction, the hydrogen atom")
print("H5 is moving between carbon C2, C3 and nitrogen N6:\n")
print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n")
print("# FORCE CONSTANT")
print("- Summary of eigenvectors and eigenvalues\n")
print(" Cycle   Five minimum eigenvalues")
print("         Six eigenvectors required to have negative eigenvalues")
print("----------------------------------------------------------------")
print("    1   -0.02572   0.01727   0.01770   0.02530   0.03065")
print("         D(1,2,5,6)          L(1,2,6,5,-2)       A(5,2,6)            ")
print("         L(1,2,6,5,-1)       R(2,5)              R(1,6)              \n")
print("    2   -0.02498   0.01303   0.01686   0.02454   0.02999")
print("         L(1,2,6,5,-2)       A(5,2,6)            L(1,2,6,5,-1)       ")
print("         R(2,5)              R(1,6)              A(5,2,6)            \n")
print("    3   -0.02342   0.00198   0.01436   0.02299   0.02898")
print("         A(5,2,6)            L(1,2,6,5,-1)       R(2,5)              ")
print("         R(1,6)              A(5,2,6)            L(1,2,6,5,-2)       \n")
print("    4   -0.01753  -0.00550   0.01272   0.02154   0.02816")
print("         L(1,2,6,5,-1)       R(2,5)              R(1,6)              ")
print("         A(5,2,6)            L(1,2,6,5,-2)       D(1,2,5,6)          \n")
print("    5   -0.04729  -0.00134   0.01739   0.02883   0.03259")
print("         R(2,5)              R(1,6)              A(5,2,6)            ")
print("         L(1,2,6,5,-2)       D(1,2,5,6)          L(1,2,6,5,-1)       \n")
print("    6   -0.05312   0.01114   0.02120   0.02858   0.04011")
print("         R(1,6)              A(5,2,6)            L(1,2,6,5,-2)       ")
print("         D(1,2,5,6)          L(1,2,6,5,-1)       R(2,5)              \n")
print("    7   -0.03447   0.00517   0.02103   0.02788   0.03993")
print("         A(5,2,6)            L(1,2,6,5,-2)       D(1,2,5,6)          ")
print("         L(1,2,6,5,-1)       R(2,5)              R(1,6)              \n")
print("    8   -0.03848   0.01503   0.02139   0.03850   0.04252")
print("         L(1,2,6,5,-2)       D(1,2,5,6)          L(1,2,6,5,-1)       ")
print("         R(2,5)              R(1,6)              A(5,2,6)            \n")
print("    9   -0.02257   0.01210   0.02077   0.03758   0.04226")
print("         D(1,2,5,6)          L(1,2,6,5,-1)       R(2,5)              ")
print("         R(1,6)              A(5,2,6)            D(1,2,5,6)          \n")
print("   10   -0.02325   0.01287   0.02183   0.03828   0.04333")
print("         L(1,2,6,5,-1)       R(2,5)              R(1,6)              ")
print("         A(5,2,6)            D(1,2,5,6)          L(1,2,6,5,-2)       \n")
print("   11   -0.03093   0.00029   0.02167   0.03508   0.03829")
print("         R(2,5)              R(1,6)              A(5,2,6)            ")
print("         D(1,2,5,6)          L(1,2,6,5,-2)       L(1,2,6,5,-1)       \n")
print("   12   -0.04648   0.01176   0.02377   0.03858   0.04203")
print("         R(1,6)              A(5,2,6)            D(1,2,5,6)          ")
print("         L(1,2,6,5,-2)       L(1,2,6,5,-1)       R(2,5)              \n")
print("   13   -0.04531   0.01238   0.02611   0.03868   0.04510")
print("         A(5,2,6)            D(1,2,5,6)          L(1,2,6,5,-2)       ")
print("         L(1,2,6,5,-1)       R(2,5)              R(1,6)              \n")
print("   14   -0.05470   0.01091   0.02603   0.03846   0.04483")
print("         D(1,2,5,6)          L(1,2,6,5,-2)       L(1,2,6,5,-1)       ")
print("         R(2,5)              R(1,6)              A(5,2,6)            \n")
print("   15   -0.06340   0.00964   0.02713   0.03904   0.04517")
print("         L(1,2,6,5,-2)       L(1,2,6,5,-1)       R(2,5)              ")
print("         R(1,6)              A(5,2,6)            L(1,2,6,5,-2)       \n")
print("   16   -0.07027   0.00778   0.02756   0.03885   0.04494")
print("         L(1,2,6,5,-1)       R(2,5)              R(1,6)              ")
print("         A(5,2,6)            L(1,2,6,5,-2)       D(1,2,5,6)          \n")
print("   17   -0.07648   0.00563   0.02863   0.03887   0.04494")
print("         R(2,5)              R(1,6)              A(5,2,6)            ")
print("         L(1,2,6,5,-2)       D(1,2,5,6)          R(2,5)              \n")
print("   18   -0.07595   0.00492   0.02834   0.03858   0.04482")
print("         R(1,6)              A(5,2,6)            L(1,2,6,5,-2)       ")
print("         D(1,2,5,6)          R(2,5)              L(1,2,6,5,-1)       \n")
print("   19   -0.08131   0.00322   0.02879   0.03922   0.04457")
print("         A(5,2,6)            L(1,2,6,5,-2)       D(1,2,5,6)          ")
print("         R(2,5)              L(1,2,6,5,-1)       R(1,6)              \n")
print("   20   -0.08714   0.00468   0.02636   0.03922   0.04345")
print("         L(1,2,6,5,-2)       D(1,2,5,6)          R(2,5)              ")
print("         L(1,2,6,5,-1)       R(1,6)              R(1,5)      \n")
print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n")
print("  This table give 5 minimum eigenvalues and 6 eigenvectors required to have ne-")
print("gative eigenvalues in each optimization step. The eigenvalues will tranform to ")
print("the vibrational frequencies, so, for transition state, there should be one neg-")
print("ative eigenvalue (it is ok that two or more negative eigenvalues during optimi-")
print("zation, but in the finally step, there should be only one). The 6 eigenvactors")
print("indicates the vibrational mode of the minimum eigenvactor, for a good TS calcu-")
print("lation job, the key atoms (those relative to the reaction site, atom H5, C2, C3")
print("and N6 in this example) should be included in these eigenvactors more. There is")
print("another tip: if you found the key atoms in your calculation are almost not inc-")
print("luded in these eigenvactors, or there is no negative eigenvalues during several")
print("optimization steps, the calculation may not go to the right way. Just stop it &")
print("modify the initial geometry, and calculate again (to save time).\n\n\n")
print("# From Author\n")
print("- gauMonitor was written with Bash shell and Python script, it could run on mac")
print("  and Linux machines natively. For Microsoft Windows users who want to use this")
print("  program, please use WSL or something else? (I am not a Windows user, sorry)")
print("- Output file in this documents could be found from:")
print("      https://github.com/wongzit/gauMonitor")
print("- More information about me:")
print("      https://wongzit.github.io")
print("- Bugs report, please send e-mail to:")
print("      wongzit@yahoo.co.jp\n\n")
print("                            +-+-+-+-+-+-+-+-+-+-+-+")
print("                            |        E n d        |")
print("                            +-+-+-+-+-+-+-+-+-+-+-+\n\n")